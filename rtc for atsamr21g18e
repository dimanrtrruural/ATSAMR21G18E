

#ifndef REAL_TIME_CLOCK_H
#define REAL_TIME_CLOCK_H

/*- Includes ----------------------------------------------------------------*/
#include <stdint.h>

/*- Definitions -------------------------------------------------------------*/
#define RTC_BASE_YEAR    2000

/*- Prototypes --------------------------------------------------------------*/
void rtc_init(void);
void rtc_set_time(void);
void rtc_get_time(void);
//void rtc_task_handler(void);
int16_t HOUR_LCD;
int16_t MINUTE_LCD;
int16_t SECOND_LCD;
int16_t DAY_LCD;
int16_t MONTH_LCD;
int16_t YEAR_SEND;
int16_t YEAR_LCD;
int DAY_OF_WEEK_LCD;
int8_t CORRECT_SEC;
//extern uint8_t datatest;
/*- Implementations ---------------------------------------------------------*/

//-----------------------------------------------------------------------------
void rtc_init(void)
{   
GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |//подключение к GCLK(1):
GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(1);

SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K;
SYSCTRL->XOSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */

while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )

GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(1) | GCLK_GENCTRL_SRC(GCLK_SOURCE_XOSC32K) |
GCLK_GENCTRL_IDC | GCLK_GENCTRL_RUNSTDBY | GCLK_GENCTRL_GENEN;
while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);

GCLK-> GENDIV.reg = GCLK_GENDIV_ID (1) | GCLK_GENDIV_DIV (32) ;
while (GCLK-> STATUS.reg & GCLK_STATUS_SYNCBUSY);
	
	
  	RTC->MODE2.CTRL.reg = RTC_MODE2_CTRL_SWRST; 
  	RTC->MODE2.CTRL.reg = RTC_MODE2_CTRL_MODE_CLOCK | RTC_MODE2_CTRL_PRESCALER_DIV1024;
  	RTC->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
}
//-----------------------------------------------------------------------------
void rtc_get_time(void)
{
	RTC_MODE2_CLOCK_Type clock;

	RTC->MODE2.READREQ.reg = RTC_READREQ_RREQ;
	while (RTC->MODE2.STATUS.bit.SYNCBUSY);

	clock = RTC->MODE2.CLOCK;

	HOUR_LCD = clock.bit.HOUR;
	MINUTE_LCD = clock.bit.MINUTE;
	SECOND_LCD = clock.bit.SECOND;
	DAY_LCD = clock.bit.DAY;
	MONTH_LCD = clock.bit.MONTH;
	YEAR_LCD = clock.bit.YEAR+ RTC_BASE_YEAR;
	YEAR_SEND = clock.bit.YEAR;		
}

void rtc_correct_second(void)
{
	RTC->MODE2.CLOCK.reg =
	RTC_MODE2_CLOCK_YEAR(YEAR_SEND) |
	RTC_MODE2_CLOCK_MONTH(MONTH_LCD) |
	RTC_MODE2_CLOCK_DAY(DAY_LCD) |
	RTC_MODE2_CLOCK_HOUR(HOUR_LCD) |
	RTC_MODE2_CLOCK_MINUTE(MINUTE_LCD) |
	RTC_MODE2_CLOCK_SECOND(SECOND_LCD+CORRECT_SEC);
}

int a, y, m;
void get_week(void)
{
	a = ( 14 - MONTH_LCD ) / 12;
	y = YEAR_LCD - a;
	m = MONTH_LCD + 12 * a - 2;
	DAY_OF_WEEK_LCD = 7000 + ( DAY_LCD + y + y / 4 - y / 100 + y / 400 + (31 * m) / 12 );	
	DAY_OF_WEEK_LCD = DAY_OF_WEEK_LCD % 7; 
}
void REAL_TIME_CLOCK(void)
{	 
	rtc_get_time();
    get_week();
}
#endif

